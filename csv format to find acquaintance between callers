#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>
#include <sstream>

using namespace std;

void readCSV(std::istream& infile, std::multimap<string,string>& map){
  string s;
  vector<string> vec;
  while(getline(infile,s,'\n')){
    cout << s << endl;
    vec.push_back(s);
    }

  int n = vec.size();
  for(int i = 0; i < n; i++){
    int m = vec[i].length();
    for(int j = 0; j < m; j++){
      string temp = vec[i];
      if(temp[j] == ','){
        map.insert(make_pair(vec[i].substr(0,j),vec[i].substr(j+1,m-j-1)));
      }
    }
  }
}

bool isFriend(std::multimap<string, string>& map, string s1, string s2){
  for(multimap<string, string>::iterator it=map.begin(); it != map.end(); it++){
    if(it->first == s1 && it->second == s2){
      return true;}
  else{return false;}
  }
}

bool isACQ(std::multimap<string, string>& map, string s1, string s2){
  string s3;
  while(isFriend(map,s1,s3) && isFriend(map,s2,s3))
  {
      multimap<string, string>::iterator it = map.find(s1);
      if(it->second == s2){return true;}                                                                                                               
  }
  return false;                                                                                                                                        
}


int main(int argc, char* argv[])                                                                                                                       
{
  multimap<string, string> hash;                                                                                                                       
  ifstream infile;
  ofstream outfile;

  //open the file
  infile.open("phonenum.txt");                                                                                                                         
  //if the file does not exist
  if(!infile){
    cout << "infile does not exist." << endl;                                                                                                          
  }
  readCSV(infile,hash);                                                                                                                                
  
  //showing contents                                                                                                                                   
  std::cout << "the map contains: \n" << endl;
  for(multimap<string, string>::const_iterator it=hash.begin(); it != hash.end(); it++){                                                               
    cout << it->first << "=>" << it->second << endl;                                                                                                   
  }
  
  //Create hashmap to store the users' name and the number of their acquaintances
  map<string, int> results;
  int num = 0;                                                                                                                                         
  for(multimap<string, string>::const_iterator it=hash.begin(); it != hash.end(); it++){                                                               
    while(!results.count(it->first)){                                                                                                                  
      if(isACQ(hash,(*it).second,(*it++).second))                                                                                                      
      { num++;}                                                                                                                                        
      results.insert(make_pair(it->first, num));                                                                                                       
    } 
  } 

  //print out                                                                                                                                          
  std::cout << "The final map contains: \n" << endl;                                                                                                   
  for(map<string, int>::const_iterator ptr=results.begin(); ptr!=results.end(); ptr++){                                                                
    cout << ptr->first << "=>" << ptr->second << endl;             
  }
  return 0;                                                                                                                                            
}
