This is a demo task. You can read about this task and its solutions in this blog post.
A zero-indexed array A consisting of N integers is given. Anequilibrium index of this array is any integer P such that 0 ≤ P < N and the sum of elements of lower indices is equal to the sum of elements of higher indices, i.e. 
A[0] + A[1] + ... + A[P−1] = A[P+1] + ... + A[N−2] + A[N−1].
Sum of zero elements is assumed to be equal to 0. This can happen if P = 0 or if P = N−1.
For example, consider the following array A consisting of N = 7 elements:
A[0] = -7   A[1] =  1   A[2] = 5
A[3] =  2   A[4] = -4   A[5] = 3
A[6] =  0
P = 3 is an equilibrium index of this array, because:
•	A[0] + A[1] + A[2] = A[4] + A[5] + A[6]
P = 6 is also an equilibrium index, because:
•	A[0] + A[1] + A[2] + A[3] + A[4] + A[5] = 0
and there are no elements with indices greater than 6.
P = 7 is not an equilibrium index, because it does not fulfill the condition 0 ≤ P < N.
Write a function
int solution(int A[], int N);
that, given a zero-indexed array A consisting of N integers, returns any of its equilibrium indices. The function should return −1 if no equilibrium index exists.
Assume that:
•	N is an integer within the range [0..100,000];
•	each element of array A is an integer within the range [−2,147,483,648..2,147,483,647].
For example, given array A such that
A[0] = -7   A[1] =  1   A[2] = 5
A[3] =  2   A[4] = -4   A[5] = 3
A[6] =  0
the function may return 3 or 6, as explained above.
Complexity:
•	expected worst-case time complexity is O(N);
•	expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
Elements of input arrays can be modified.
Copyright 2009–2014 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.

//python version 

if __name__=="__main__":
    A = [-7,1, 5, 2, -4, 3, 0]
    for i in range(len(A)):
        if sum(A[:i])==sum(A[i+1:]):
            print(i)
    else:
        print(-1)



//C++ version
#include <iostream>
#include <vector>

using namespace std;
      
bool isValid(int x)
{
    if(x < −2147483648 || x > 2147483647)
    {return false;}
    else
    {return true;}
}


int equilibrium(vector<int> &A)
{
   int n = A.size();
   int sum = 0;      // initialize sum of whole array
   int leftsum = 0; // initialize leftsum
   int i;
 
   /* Find sum of the whole array */
   for (i = 0; i < n; i++)
    while(isValid(sum))
    {
        sum += A[i];
    }
    
   for( i = 0; i < n; i++)
   {
      while(isValid(A[i]))
      {
      sum -= A[i]; // sum is now right sum for index i
 
      if(leftsum == sum)
        {return i;}
 
      leftsum += A[i];
      }
   }
 
    /* If no equilibrium index found, then return 0 */
    return -1;
}
 
int main()
{
  vector<int> A = {-7, 1, 5, 2, -4, 3, 0};
  cout << "First equilibrium index is" << equilibrium(A) << endl;
 
  return 0;
}





