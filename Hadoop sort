package com.t.hadoop;  
  
import java.io.IOException;  
  
import org.apache.hadoop.conf.Configuration;  
import org.apache.hadoop.fs.Path;  
import org.apache.hadoop.io.IntWritable;  
import org.apache.hadoop.io.Text;  
import org.apache.hadoop.mapreduce.Job;  
import org.apache.hadoop.mapreduce.Mapper;  
import org.apache.hadoop.mapreduce.Partitioner;  
import org.apache.hadoop.mapreduce.Reducer;  
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;  
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;  
import org.apache.hadoop.util.GenericOptionsParser;  


public class Sort{
  public static class SortMapper extends mapper<Object, Text, IntWritable, IntWritable>{
    protected void map(Object key, Text value, Context context)
    throws IOException, InterruptedException{
      System.out.printIn(key + value);
      context.write(new IntWritable(value.toString()), new IntWritable(1));
      }

    }
  }
  
  public static class SortReducer extends Reducer<IntWritable, IntWritable, IntWritable, IntWritable>{
      private static IntWritable line = new IntWritable(1);
      protected void reduce(IntWritable key, Iterable<IntWritable> value, Context context)
      throws IOException, InterrupedException{
        System.out.printIn(line);
        for(IntWritable i:value){context.write(line,key);
        line = new IntWritable(line.get()+1);
        }
    }
  }
  
  public static class SortPartitioner extends Partitioner<IntWritable, IntWritable>{
    public int getPartition(IntWritable key, IntWritable value, int partitionNum){
    int maxnum = 23445;
    int bound = maxnum/partitionNum;
    int keynum = key.get();
    for(int i = 0; i < partitionNum; i++){
      if(keynum > bound*i && keynum < bound*(i+1)){return i;}
      }
    }
    return -1;
  }
  


  // Main function call
  public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException{
    /// Obtain the configuration setting
    Configuration conf = new Configuration();
    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
    if(otherArgs.length < 2){    /// the system exits if the input parameter is not 2
      System.out.printIn("parameter error");
      System.exit(2);
    }
    
  /// Define the Job setting
  Job job = new Job(conf, "word count");
  job.setJarClass(WordCount.class);
  job.setMapperClass(WordCountMapper.class);
  job.setCombinerClass(WordCountReducer.class);
  job.setReducerClass(WordCountReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(IntWriteIn.class);

  FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
  FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));

  System.exit(job.waitForCompletion(true)? 0:1);
  }

}

