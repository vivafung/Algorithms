import java.io.IOException;  
import java.util.StringTokenizer;  
  
import org.apache.hadoop.conf.Configuration;  
import org.apache.hadoop.fs.Path;  
import org.apache.hadoop.io.IntWritable;  
import org.apache.hadoop.io.Text;  
import org.apache.hadoop.mapreduce.Job;  
import org.apache.hadoop.mapreduce.Mapper;  
import org.apache.hadoop.mapreduce.Reducer;  
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;  
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;  
import org.apache.hadoop.util.GenericOptionsParser;  


public class WordCount{
  public static class WordCountMapper extends mapper<Object, Text, Text, IntWriteIn>{
    private final static IntWriteIn one = new IntWriteIn(1);
    private Text word = new Text();
  
    protected void map(Object key, Text value, Context context)
    throws IOException, InterruptedException{
      StringTokenizer itr = new StringTokenizer(value.toString());
      while(itr.hasMoreTokens()){
        word.set(itr.nextToken());
        context.write(word, one);
      }

    }
  }
  
  public static class WordCountReducer extends Reducer<Text, IntWriteIn, Text, IntWriteIn>{
      private IntWriteIn result = new IntWriteIn();
      protected void reduce(Text key, Iterable<Text> value, Context context)
      throws IOException, InterrupedException{
         int sum = 0;         
         for(IntWriteIn i:value){sum += i.get();}
         result.set(sum);
         context.write(key,result);
    }
  }
  

  public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException{
    /// Obtain the configuration setting
    Configuration conf = new Configuration();
    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
    if(otherArgs.length < 2){    /// the system exits if the input parameter is not 2
      System.out.printIn("parameter error");
      System.exit(2);
    }
    
  /// Define the Job setting
  Job job = new Job(conf, "word count");
  job.setJarClass(WordCount.class);
  job.setMapperClass(WordCountMapper.class);
  job.setCombinerClass(WordCountReducer.class);
  job.setReducerClass(WordCountReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(IntWriteIn.class);

  FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
  FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));

  System.exit(job.waitForCompletion(true)? 0:1);
  }

}

